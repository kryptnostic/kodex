buildscript {
  repositories {
    maven {
      url 'http://artifactory.krypt.int/artifactory/libs-release/'
    }
    maven {
      url 'http://artifactory.krypt.int/artifactory/libs-snapshot/'
    }
    maven {
      url 'http://artifactory.krypt.int/artifactory/remote-repos/'
    }
  }
}

plugins {
    id 'org.inferred.processors' version '1.1'
    id "java"
    id "maven"
    id "eclipse"
    id "idea"
    id "jacoco"
}

apply from: "https://raw.githubusercontent.com/kryptnostic/gradles/master/kryptnostic.gradle"

description = "Kryptnostic Java client"
group = "com.kryptnostic"

apply plugin: "maven-publish"

sourceCompatibility=JavaVersion.VERSION_1_7

repositories {
  maven {
    url 'http://artifactory.krypt.int/artifactory/libs-release/'
  }
  maven {
    url 'http://artifactory.krypt.int/artifactory/libs-snapshot/'
  }
  maven {
    url 'http://artifactory.krypt.int/artifactory/remote-repos/'
  }
  mavenCentral()
  mavenLocal()
  maven {
    url "https://build.shibboleth.net/nexus/content/groups/public/"
  }
  maven {
    url "http://maven.springframework.org/snapshot"
  }
  maven {
    url  "http://maven.springframework.org/milestone"
  }
  maven {
   url "http://repo.maven.apache.org/maven2"
  }
  maven {
   url "https://oss.sonatype.org/content/repositories/snapshots"
  }

}

dependencies {

    // processor comes from org.inferred.processors
    processor "org.immutables:value:${immutables_version}"

    /*
     * SL4J + LOG4J2
     */
    compile group: "org.slf4j", name: "slf4j-api", version:"${slf4j_version}"

    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: "${log4j_version}"
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4j_version}"
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4j_version}"

    /*
     * GUAVA
     * EventBus, FluentIterables, ListenableFutures and more
     */
    compile "com.google.guava:guava:${guava_version}"

    /*
     JODA TIME - A better datetime class.
     */
    compile "joda-time:joda-time:${jodatime_version}"

    // Metrics
    // Awesome reporting-- defaults to Graphite
    compile "io.dropwizard.metrics:metrics-core:${dropwizard_metrics_version}"
    compile "io.dropwizard.metrics:metrics-graphite:${dropwizard_metrics_version}"
    compile "io.dropwizard.metrics:metrics-annotation:${dropwizard_metrics_version}"

    /*
     * @Inject and @Nullable support
     */
    compile "javax.inject:javax.inject:${javax_inject_version}"
    compile "com.google.code.findbugs:jsr305:${findbugs_version}"

    compile "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-guava:${jackson_version}"
    compile "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${jackson_version}"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner:${jackson_version}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jackson_version}"
    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:${jackson_version}"

    /*
     * APACHE COMMONS
     * Logging, StringUtils, RandomStringUtils, IOUtils, and more
     */
    compile "commons-io:commons-io:${commonsio_version}"
    compile "org.apache.commons:commons-lang3:${commonsLang_version}"
    compile "commons-codec:commons-codec:${commons_codec_version}"
    if( project.hasProperty('developmentMode') && project.developmentMode ) {
        logger.quiet("$project.name is using project dependencies.")
        compile( project(":krypto:krypto-api") )
    } else {
        logger.quiet("$project.name is using jar dependencies.")
        compile "com.kryptnostic:krypto-api:${krypto_version}"
    }

    compile "com.squareup.retrofit:retrofit:${retrofit_version}"
    compile "com.squareup.okhttp:okhttp-urlconnection:${okhttp_version}"
    compile "com.squareup.okhttp:okhttp:${okhttp_version}"
    compile "com.squareup.retrofit:retrofit-converters:${retrofit_version}"

    /*
     * TESTING
     */
    testCompile 'junit:junit:4.12'
}

task sourcesJar(type : Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task testJar(type: Jar, dependsOn: testClasses) {
    classifier = 'tests'
    from sourceSets.test.output
}

configurations {
    tests
      published.extendsFrom tests, archives
}

artifacts {
	archives sourcesJar
    archives jar
    archives javadocJar
	tests testJar
}

install {
	configuration = configurations.published
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true
    ext.sourceCompatibility=JavaVersion.VERSION_1_7
}
